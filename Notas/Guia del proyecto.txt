
* Guia del Ejercicio - Sistema de Gestión de Empleados * 

# Contexto:
Estás desarrollando un sistema de gestión de empleados para una empresa que requiere manejar diferentes tipos de empleados (empleados regulares, gerentes, directores) 
y sus respectivos salarios y beneficios.
Además, el sistema debe ser capaz de manejar errores, generar reportes utilizando tipos de datos anónimos, 
y aplicar conceptos avanzados de programación orientada a objetos (POO) como polimorfismo, sobrecarga y sobrescritura de métodos, así como el uso de genéricos, estáticos y listas.

# Objetivos:
1. Diseñar un sistema flexible y escalable para la gestión de empleados.
2. Implementar cálculos de salarios y beneficios personalizados para diferentes tipos de empleados.
3. Utilizar genéricos, métodos estáticos y listas para la organización y manipulación de datos.
4. Implementar manejo de excepciones para garantizar la integridad y validación de los datos.
5. Crear reportes con tipos de datos anónimos para la visualización de información específica.
6. Aplicar principios de POO avanzados, incluyendo polimorfismo, sobrecarga y sobrescritura de métodos.

# Requerimientos:
1. Clases y Herencia  
    # Clase Base `Empleado`:
        - Propiedades:
            - `Nombre` (string)
            - `Apellido` (string)
            - `Edad` (int)
            - `SalarioBase` (decimal)
        - Métodos:
            - `virtual decimal CalcularSalario()` que retorna el salario base.
            - `virtual void MostrarInformacion()` que muestra `Nombre`, `Apellido`, `Edad`, `SalarioBase`.
            - Método estático `static int ContarEmpleados(List<Empleado> empleados)` para contar el número de empleados en una lista.
            - Implementar una validación básica de datos en un método `ValidarDatos()`.

    # Clase Derivada `Gerente`: 
        - Propiedades:
            - `Bono` (decimal)
        - Métodos:
            - Sobrescribe `CalcularSalario()` para incluir el bono en el salario.
            - Sobrescribe `MostrarInformacion()` para incluir el `Bono`.

    # Clase Derivada `Director`:
        - Propiedades:
            - `StockOptions` (decimal)
        - Métodos:
            - Sobrescribe `CalcularSalario()` para incluir `Bono` y `StockOptions`.
            - Sobrescribe `MostrarInformacion()` para incluir `Bono` y `StockOptions`.

    # Interfaz `IEmpleado`:
        - Métodos:
            - `void MostrarInformacion();`
            - `decimal CalcularSalario();`
        - Implementar esta interfaz en todas las clases de empleados para garantizar la uniformidad en la manipulación de objetos de tipo `Empleado`.

2. Métodos y Funcionalidad:   
     - Sobrecargar el método `CalcularSalario()` en la clase `Empleado`:
     - Sobrecarga con `int porcentajeIncremento` para calcular salario con un incremento basado en porcentaje.
     - Sobrecarga con `decimal bonoExtra` para calcular salario con un bono adicional opcional.
     - Implementar el método estático `static void MostrarTodosLosEmpleados<T>(List<T> empleados)` en la clase `Empleado` para mostrar la información de todos los empleados utilizando genéricos.

3. Generics:
   - Utiliza genéricos para crear métodos que manejen listas de empleados y realicen operaciones como filtrado o agrupamiento sin depender de un tipo específico de empleado.

4. Statics:
    - Utiliza métodos estáticos en la clase `Empleado` para realizar operaciones comunes como contar empleados y mostrar todos los empleados.

5. Listas:
    - Utiliza una lista genérica `List<Empleado>` para almacenar y gestionar los empleados.
    - Crea métodos para agregar, eliminar, y buscar empleados en la lista.


6. Excepciones:
    - Implementa una excepción personalizada `DatosEmpleadoInvalidosException` que sea lanzada por `ValidarDatos()` si se detectan errores.
    - Maneja las excepciones en el código principal para asegurarte de que los errores se gestionen adecuadamente.


7. Tipos de Datos Anónimos: 
    - Crea un reporte que utilice tipos de datos anónimos para mostrar solo `Nombre` y `Salario` de los empleados, ordenados por `Salario`. 
    - Crea otro reporte con tipos de datos anónimos para mostrar empleados que sean `Gerente` o `Director`. 
    # Profundizar esta idea

8. Interacción del Usuario:
    # Desarrolla un menú de consola que permita al usuario:
        - Ver la lista completa de empleados.
        - Buscar empleados por nombre o apellido.
        - Agregar nuevos empleados con manejo de excepciones.
        - Eliminar empleados de la lista.
        - Mostrar reportes usando tipos de datos anónimos.
        - Calcular salarios con un incremento porcentual o bono adicional. 
        - Contar el número total de empleados.

9. Polimorfismo:
    - Usa polimorfismo para permitir que el método `MostrarInformacion()` y `CalcularSalario()` funcionen correctamente en todos los tipos de empleados (`Empleado`, `Gerente`, `Director`).

10. Sobrecarga y Sobrescritura de Métodos:
     - Sobrescribe métodos en las clases derivadas para personalizar la funcionalidad de `MostrarInformacion()` y `CalcularSalario()`.
     - Sobrecarga métodos en la clase `Empleado` para manejar diferentes escenarios en el cálculo del salario.